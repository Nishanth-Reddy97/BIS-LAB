import random

# Objective function: f(x) = -x^2 + 20x + 5
def fitness_function(position):
    x = position[0]  # single variable
    return -x**2 + 20*x + 5

class Particle:
    def __init__(self, dim, bounds):
        self.position = [random.uniform(bounds[0], bounds[1]) for _ in range(dim)]
        self.velocity = [random.uniform(-1, 1) for _ in range(dim)]
        self.best_position = list(self.position)
        self.best_value = fitness_function(self.position)

    def update_velocity(self, gbest, w, c1, c2):
        for i in range(len(self.position)):
            r1, r2 = random.random(), random.random()
            cognitive = c1 * r1 * (self.best_position[i] - self.position[i])
            social = c2 * r2 * (gbest[i] - self.position[i])
            self.velocity[i] = w * self.velocity[i] + cognitive + social

    def update_position(self, bounds):
        for i in range(len(self.position)):
            self.position[i] += self.velocity[i]
            # Keep within bounds
            self.position[i] = max(bounds[0], min(bounds[1], self.position[i]))

def PSO(num_particles=30, dim=1, bounds=(-10, 30), max_iter=100, w=0.7, c1=1.5, c2=1.5):
    swarm = [Particle(dim, bounds) for _ in range(num_particles)]

    # Global best initialization (for maximization)
    gbest = max(swarm, key=lambda p: p.best_value).best_position
    gbest_value = fitness_function(gbest)

    for t in range(max_iter):
        for particle in swarm:
            particle.update_velocity(gbest, w, c1, c2)
            particle.update_position(bounds)

            value = fitness_function(particle.position)

            # Update personal best
            if value > particle.best_value:  # <-- changed to maximize
                particle.best_position = list(particle.position)
                particle.best_value = value

        # Update global best
        best_particle = max(swarm, key=lambda p: p.best_value)
        if best_particle.best_value > gbest_value:
            gbest = list(best_particle.best_position)
            gbest_value = best_particle.best_value

        print(f"Iteration {t+1}: Best Value = {gbest_value:.4f}")

    return gbest, gbest_value

if __name__ == "__main__":
    best_pos, best_val = PSO()
    print("\nOptimal Solution Found:")
    print("Best Position (x):", best_pos[0])
    print("Best Value (f(x)):", best_val)
