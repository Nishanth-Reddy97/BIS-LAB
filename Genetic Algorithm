import random

# ---- Parameters ----
TARGET = "Hello World"
GENE_SET = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ "
POPULATION_SIZE = 100
MUTATION_RATE = 0.01

# ---- Fitness Function ----
def fitness(chromosome):
    """Return number of characters that match the target string."""
    return sum(1 for expected, actual in zip(TARGET, chromosome) if expected == actual)

# ---- Generate a Random Chromosome ----
def random_chromosome():
    """Generate a random string of same length as TARGET."""
    return ''.join(random.choices(GENE_SET, k=len(TARGET)))

# ---- Mutation ----
def mutate(chromosome):
    """Randomly mutate a single gene (character)."""
    chromosome = list(chromosome)
    idx = random.randrange(len(chromosome))
    chromosome[idx] = random.choice(GENE_SET)
    return ''.join(chromosome)

# ---- Crossover ----
def crossover(parent1, parent2):
    """Perform single-point crossover."""
    if len(parent1) < 2:
        return parent1
    idx = random.randint(1, len(parent1) - 2)
    child = parent1[:idx] + parent2[idx:]
    return child

# ---- Selection (Tournament Style) ----
def select_pair(population):
    """Select two fittest individuals from population."""
    sorted_pop = sorted(population, key=lambda x: x[1], reverse=True)
    return random.sample(sorted_pop[:50], 2)

# ---- Initialize Population ----
population = [(random_chromosome(), 0) for _ in range(POPULATION_SIZE)]
generation = 0

# ---- Evolution Loop ----
while True:
    # Evaluate fitness
    population = [(chrom, fitness(chrom)) for chrom, _ in population]
    
    # Get the best individual
    best_chrom, best_fit = max(population, key=lambda x: x[1])
    
    print(f"Generation {generation}: {best_chrom}  Fitness: {best_fit}")
    
    # Stop if fully matched
    if best_fit == len(TARGET):
        print("\nTarget reached!")
        break
    
    # ---- Create next generation ----
    next_generation = []
    
    while len(next_generation) < POPULATION_SIZE:
        parent1, parent2 = select_pair(population)
        parent1, parent2 = parent1[0], parent2[0]
        child = crossover(parent1, parent2)
        if random.random() < MUTATION_RATE:
            child = mutate(child)
        next_generation.append((child, 0))
    
    population = next_generation
    generation += 1

