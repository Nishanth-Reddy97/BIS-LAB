FUNCTION fitness(x):
    RETURN x * x

FUNCTION decode(binary_string):
    RETURN integer value of binary_string

START
INPUT POP_SIZE
SET CHROM_LENGTH = 5

// Step 1: Generate initial population
FOR i = 1 TO POP_SIZE:
    population[i] = random 5-bit binary string

// Step 2: Calculate fitness and selection probabilities
FOR EACH chromosome IN population:
    x = decode(chromosome)
    fit = fitness(x)
    STORE x, fit

Compute total_fitness
FOR EACH fitness:
    probability = fitness / total_fitness
    expected_count = probability * POP_SIZE

// Step 3: Roulette Wheel Selection
FOR i = 1 TO POP_SIZE:
    SELECT chromosome based on probability
    ADD to mating_pool

// Step 4: Crossover (pairwise)
FOR i = 0 TO size of mating_pool - 1 STEP 2:
    parent1, parent2 = mating_pool[i], mating_pool[i+1]
    crossover_point = random between 1 and CHROM_LENGTH - 1
    child = crossover(parent1, parent2)
    ADD child to offspring

// Step 5: Mutation
FOR EACH child IN offspring:
    FOR EACH bit IN child:
        IF random < mutation_rate:
            FLIP the bit
    ADD mutated child to new_generation

PRINT population, fitness, offspring, and mutations
END
